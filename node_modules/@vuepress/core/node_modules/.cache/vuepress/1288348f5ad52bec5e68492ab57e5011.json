{"remainingRequest":"/Users/xule05/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xule05/vuepress/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/xule05/vuepress/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xule05/vuepress/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xule05/vuepress/docs/guide/assets.md?vue&type=template&id=047865b1&","dependencies":[{"path":"/Users/xule05/vuepress/docs/guide/assets.md","mtime":1612246777689},{"path":"/Users/xule05/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}