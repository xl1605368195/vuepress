{"remainingRequest":"/Users/xule05/vuepress/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/xule05/vuepress/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/xule05/vuepress/docs/guide/using-vue.md?vue&type=style&index=0&module=true&lang=css&","dependencies":[{"path":"/Users/xule05/vuepress/docs/guide/using-vue.md","mtime":1612246777694},{"path":"/Users/xule05/vuepress/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/xule05/vuepress/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZXhhbXBsZSB7CiAgY29sb3I6ICM0MWI4ODM7Cn0K"},{"version":3,"sources":["using-vue.md"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwMA;AACA;AACA","file":"using-vue.md","sourceRoot":"docs/guide","sourcesContent":["<template>\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"><h1 id=\"using-vue-in-markdown\"><a class=\"header-anchor\" href=\"#using-vue-in-markdown\">#</a> Using Vue in Markdown</h1>\n<h2 id=\"browser-api-access-restrictions\"><a class=\"header-anchor\" href=\"#browser-api-access-restrictions\">#</a> Browser API Access Restrictions</h2>\n<p>Because VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the <a href=\"https://ssr.vuejs.org/en/universal.html\" target=\"_blank\" rel=\"noopener noreferrer\">universal code requirements<OutboundLink/></a>. In short, make sure to only access Browser / DOM APIs in <code>beforeMount</code> or <code>mounted</code> hooks.</p>\n<p>If you are using or demoing components that are not SSR-friendly (for example, contain custom directives), you can wrap them inside the built-in <code>&lt;ClientOnly&gt;</code> component:</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ClientOnly</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NonSSRFriendlyComponent</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ClientOnly</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Note this does not fix components or libraries that access Browser APIs <strong>on import</strong>. To use code that assumes a browser environment on import, you need to dynamically import them in proper lifecycle hooks:</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib-that-access-window-on-import'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// use code</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If your module <code>export default</code> a Vue component, you can register it dynamically:</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dynamicComponent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dynamicComponent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      dynamicComponent<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib-that-access-window-on-import'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dynamicComponent <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>default\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Also see:</strong></p>\n<ul>\n<li><a href=\"https://vuejs.org/v2/guide/components.html#Dynamic-Components\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js &gt; Dynamic Components<OutboundLink/></a></li>\n</ul>\n<h2 id=\"templating\"><a class=\"header-anchor\" href=\"#templating\">#</a> Templating</h2>\n<h3 id=\"interpolation\"><a class=\"header-anchor\" href=\"#interpolation\">#</a> Interpolation</h3>\n<p>Each Markdown file is first compiled into HTML and then passed on as a Vue component to <code>vue-loader</code>. This means you can use Vue-style interpolation in text:</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>{{ 1 + 1 }}\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Output</strong></p>\n<div class=\"language-text\"><pre><code>{{ 1 + 1 }}</code></pre></div>\n<h3 id=\"directives\"><a class=\"header-anchor\" href=\"#directives\">#</a> Directives</h3>\n<p>Directives also work:</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>i in 3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{{ i }} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Output</strong></p>\n<div class=\"language-text\"><pre><code><span v-for=\"i in 3\">{{ i }} </span></code></pre></div>\n<h3 id=\"access-to-site-page-data\"><a class=\"header-anchor\" href=\"#access-to-site-page-data\">#</a> Access to Site &amp; Page Data</h3>\n<p>The compiled component does not have any private data but does have access to the <RouterLink to=\"/theme/writing-a-theme.html#site-and-page-metadata\">site metadata</RouterLink> and <RouterLink to=\"/guide/global-computed.html\">computed properties</RouterLink>. For example:</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>{{ $page }}\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Output</strong></p>\n<!--beforebegin--><div class=\"language-json extra-class\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/using-vue.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Using Vue in Markdown\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"escaping\"><a class=\"header-anchor\" href=\"#escaping\">#</a> Escaping</h2>\n<p>By default, fenced code blocks are automatically wrapped with <code>v-pre</code>. To display raw mustaches or Vue-specific syntax inside inline code snippets or plain text, you need to wrap a paragraph with the <code>v-pre</code> custom container:</p>\n<p><strong>Input</strong></p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code>::: v-pre\n<span class=\"token code keyword\">`{{ This will be displayed as-is }}`</span>\n:::\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Output</strong></p>\n<div v-pre><p><code>{{ This will be displayed as-is }}</code></p>\n</div><h2 id=\"using-components\"><a class=\"header-anchor\" href=\"#using-components\">#</a> Using Components</h2>\n<p>Any <code>*.vue</code> files found in <code>.vuepress/components</code> are automatically registered as <a href=\"https://vuejs.org/v2/guide/components-registration.html#Global-Registration\" target=\"_blank\" rel=\"noopener noreferrer\">global<OutboundLink/></a>, <a href=\"https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components\" target=\"_blank\" rel=\"noopener noreferrer\">async<OutboundLink/></a> components. For example:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ components\n      ├─ demo-1.vue\n      ├─ OtherComponent.vue\n      └─ Foo\n         └─ Bar.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Inside any Markdown file you can then directly use the components (names are inferred from filenames):</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>demo-1</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OtherComponent</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Foo-Bar</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><demo-1></demo-1>\n<OtherComponent/>\n<Foo-Bar/>\n<div class=\"custom-block warning\"><p class=\"custom-block-title\">IMPORTANT</p>\n<p>Make sure a custom component’s name either contains a hyphen or is in PascalCase. Otherwise it will be treated as an inline element and wrapped inside a <code>&lt;p&gt;</code> tag, which will lead to hydration mismatch because <code>&lt;p&gt;</code> does not allow block elements to be placed inside it.</p>\n</div>\n<h3 id=\"using-components-in-headers\"><a class=\"header-anchor\" href=\"#using-components-in-headers\">#</a> Using Components In Headers</h3>\n<p>You can use Vue components in the headers, but note the difference between the following syntaxes:</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>Output HTML</th>\n<th>Parsed Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre v-pre><code> # text &lt;Tag/&gt; </code></pre></td>\n<td><code>&lt;h1&gt;text &lt;Tag/&gt;&lt;/h1&gt;</code></td>\n<td><code>text</code></td>\n</tr>\n<tr>\n<td><pre v-pre><code> # text `&lt;Tag/&gt;` </code></pre></td>\n<td><code>&lt;h1&gt;text &lt;code&gt;&amp;lt;Tag/&amp;gt;&lt;/code&gt;&lt;/h1&gt;</code></td>\n<td><code>text &lt;Tag/&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<p>The HTML wrapped by <code>&lt;code&gt;</code> will be displayed as-is; only the HTML that is <strong>not</strong> wrapped will be parsed by Vue.</p>\n<div class=\"custom-block tip\"><p class=\"custom-block-title\">TIP</p>\n<p>The output HTML is accomplished by <a href=\"https://github.com/markdown-it/markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\">markdown-it<OutboundLink/></a>, while the parsed headers are handled by VuePress (and used for both the <RouterLink to=\"/theme/default-theme-config.html#sidebar\">sidebar</RouterLink> and document title).</p>\n</div>\n<h2 id=\"using-pre-processors\"><a class=\"header-anchor\" href=\"#using-pre-processors\">#</a> Using Pre-processors</h2>\n<p>VuePress has built-in webpack support for the following pre-processors: <code>sass</code>, <code>scss</code>, <code>less</code>, <code>stylus</code> and <code>pug</code>. All you need to do is installing the corresponding dependencies. For example, to enable <code>sass</code>:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D sass-loader node-sass\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Now you can use the following in Markdown and theme components:</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n.title\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Using <code>&lt;template lang=&quot;pug&quot;&gt;</code> requires installing <code>pug</code> and <code>pug-plain-loader</code>:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D pug pug-plain-loader\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"custom-block tip\"><p class=\"custom-block-title\">TIP</p>\n<p>If you are a Stylus user, you don’t need to install <code>stylus</code> and <code>stylus-loader</code> in your project; VuePress uses Stylus internally.</p>\n<p>For pre-processors that do not have built-in webpack config support, you will need to <RouterLink to=\"/config/#configurewebpack\">extend the internal webpack config</RouterLink> and install the necessary dependencies.</p>\n</div>\n<h2 id=\"script-style-hoisting\"><a class=\"header-anchor\" href=\"#script-style-hoisting\">#</a> Script &amp; Style Hoisting</h2>\n<p>Sometimes you may need to apply some JavaScript or CSS only to the current page. In those cases, you can directly write root-level <code>&lt;script&gt;</code> or <code>&lt;style&gt;</code> blocks in the Markdown file. These will be hoisted out of the compiled HTML and used as the <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> blocks for the resulting Vue single-file component:</p>\n<p class=\"demo\" :class=\"$style.example\"></p>\n<h2 id=\"built-in-components\"><a class=\"header-anchor\" href=\"#built-in-components\">#</a> Built-In Components</h2>\n<h3 id=\"outboundlink\"><a class=\"header-anchor\" href=\"#outboundlink\">#</a> OutboundLink <Badge text=\"stable\"/></h3>\n<p>The indicator <OutboundLink/> is used to denote external links. In VuePress, this component has been followed by every external link.</p>\n<h3 id=\"clientonly\"><a class=\"header-anchor\" href=\"#clientonly\">#</a> ClientOnly <Badge text=\"stable\"/></h3>\n<p>See <a href=\"#browser-api-access-restrictions\">Browser API Access Restrictions</a>.</p>\n<h3 id=\"content\"><a class=\"header-anchor\" href=\"#content\">#</a> Content</h3>\n<ul>\n<li>\n<p><strong>Props</strong>:</p>\n<ul>\n<li><code>pageKey</code> - string, <RouterLink to=\"/guide/global-computed.html#page\">page</RouterLink>'s hash key, defaults to current page’s key.</li>\n<li><code>slotKey</code> - string, key of <RouterLink to=\"/guide/markdown-slot.html\">Markdown slot</RouterLink>. Defaults to <RouterLink to=\"/guide/markdown-slot.html#default-slot-content\">default slot</RouterLink>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Usage</strong>：</p>\n</li>\n</ul>\n<p>Specify a specific slot for a specific page (.md) for rendering. This is useful when using a <RouterLink to=\"/theme/default-theme-config.html#custom-layout-for-specific-pages\">Custom Layout</RouterLink> or <RouterLink to=\"/theme/writing-a-theme.html\">Writing a theme</RouterLink>:</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Also see:</strong></p>\n<ul>\n<li><RouterLink to=\"/guide/global-computed.html#page\">Global Computed &gt; $page</RouterLink></li>\n<li><RouterLink to=\"/guide/markdown-slot.html\">Markdown Slot</RouterLink></li>\n<li><RouterLink to=\"/theme/writing-a-theme.html#content-outlet\">Writing a theme &gt; Content Outlet</RouterLink></li>\n</ul>\n<h3 id=\"badge\"><a class=\"header-anchor\" href=\"#badge\">#</a> Badge <Badge text=\"beta\" type=\"warning\"/> <Badge text=\"default theme\"/></h3>\n<ul>\n<li>\n<p><strong>Props</strong>:</p>\n<ul>\n<li><code>text</code> - string</li>\n<li><code>type</code> - string, optional value: <code>&quot;tip&quot;|&quot;warning&quot;|&quot;error&quot;</code>, defaults to <code>&quot;tip&quot;</code>.</li>\n<li><code>vertical</code> - string, optional value: <code>&quot;top&quot;|&quot;middle&quot;</code>, defaults to <code>&quot;top&quot;</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n</li>\n</ul>\n<p>You can use this component in a header to add some status for an API:</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token title important\"><span class=\"token punctuation\">###</span> Badge &lt;Badge text=\"beta\" type=\"warning\"/> &lt;Badge text=\"default theme\"/></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>Also see:</strong></p>\n<ul>\n<li><a href=\"#using-components-in-headers\">Using Components In Headers</a></li>\n</ul>\n</ContentSlotsDistributor>\n</template>\n<style module>\n.example {\n  color: #41b883;\n}\n</style>\n\n<script>\nexport default {\n  props: ['slot-key'],\n  mounted () {\n    document.querySelector(`.${this.$style.example}`)\n      .textContent = 'This is rendered by inline script and styled by inline CSS'\n  }\n}\n</script>\n\n\n"]}]}