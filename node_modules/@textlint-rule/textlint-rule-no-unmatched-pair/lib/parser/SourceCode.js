// MIT Â© 2018 azu
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SourceCode = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SourceCode =
/*#__PURE__*/
function () {
  function SourceCode(text) {
    _classCallCheck(this, SourceCode);

    this.text = text;
    this.index = 0;
    /** @type {{index:number, pairMark: PairMark}}[] */

    this.contextLocations = [];
  }

  _createClass(SourceCode, [{
    key: "enterContext",
    value: function enterContext(pairMark) {
      this.contextLocations.push({
        index: this.index + 1,
        pairMark: pairMark
      });
    }
  }, {
    key: "leaveContext",
    value: function leaveContext(pairMark) {
      var index = this.contextLocations.findIndex(function (context) {
        return context.pairMark.key === pairMark.key;
      });

      if (index !== -1) {
        this.contextLocations.splice(index, 1);
      }
    }
  }, {
    key: "isInContext",
    value: function isInContext(pairMark) {
      if (!pairMark) {
        return this.contextLocations.length > 0;
      }

      return this.contextLocations.some(function (contextLocation) {
        return contextLocation.pairMark.key === pairMark.key;
      });
    }
    /**
     * Return true, no more read char
     */

  }, {
    key: "read",
    value: function read() {
      return this.text[this.index];
    }
  }, {
    key: "peek",
    value: function peek() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.index += index;
    }
  }, {
    key: "canRead",
    get: function get() {
      return this.read() !== undefined;
    }
  }]);

  return SourceCode;
}();

exports.SourceCode = SourceCode;
//# sourceMappingURL=SourceCode.js.map